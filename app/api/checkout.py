from fastapi import APIRouter, HTTPException, status, Request
from uuid import UUID
import hmac
import hashlib
import json

from app import crud, schemas
from app.deps import SessionDep
from app.core.config import settings
from app.services import payment_service

router = APIRouter(
    prefix="/checkout",
    tags=["Checkout"]
)

# --- Helper functions from PayOS Documentation ---
# These functions ensure the signature string is created exactly as PayOS expects.

def sort_obj_data_by_key(obj: dict) -> dict:
    return dict(sorted(obj.items()))

def convert_obj_to_query_str(obj: dict) -> str:
    query_string = []
    for key, value in obj.items():
        value_as_string = ""
        if isinstance(value, (int, float, bool)):
            value_as_string = str(value)
        elif value in [None, 'null', 'NULL']:
            value_as_string = ""
        elif isinstance(value, list):
            # Sort objects inside the array before converting to JSON string
            sorted_list = [sort_obj_data_by_key(item) for item in value]
            value_as_string = json.dumps(sorted_list, separators=(',', ':'))
        else:
            value_as_string = str(value)
        query_string.append(f"{key}={value_as_string}")
    return "&".join(query_string)

# --- API Endpoints ---

@router.post("/request", response_model=schemas.CheckoutRequestResponse)
async def request_checkout(
    session: SessionDep,
    request: schemas.CheckoutFromCartRequest # S·ª≠ d·ª•ng request body m·ªõi
):
    """
    B·∫Øt ƒë·∫ßu qu√° tr√¨nh thanh to√°n.
    """
    # T√¨m phi√™n mua h√†ng b·∫±ng session_id t·ª´ request
    active_session = crud.get_session_by_id(session, request.session_id)
    
    if not active_session or not active_session.items or active_session.status != 'active':
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Phi√™n mua h√†ng kh√¥ng h·ª£p l·ªá, kh√¥ng c√≥ s·∫£n ph·∫©m ho·∫∑c ƒë√£ k·∫øt th√∫c."
        )

    # T·∫°o ƒë∆°n h√†ng v√† m√£ order_code t∆∞∆°ng ·ª©ng
    pending_order, order_code = crud.create_order_from_session(session, active_session)

    description = "Thanh toan don hang"
    try:
        payment_url = await payment_service.create_payment_link(
            order_code=order_code,
            amount=int(pending_order.total_amount),
            description=description
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi c·ªïng thanh to√°n: {e}"
        )

    return schemas.CheckoutRequestResponse(
        order_id=pending_order.id,
        payment_qr_url=payment_url
    )

@router.get("/status/{order_id}", response_model=schemas.CheckoutStatusResponse)
async def get_checkout_status(
    order_id: UUID,
    session: SessionDep
):
    """
    Ki·ªÉm tra ƒë·ªãnh k·ª≥ tr·∫°ng th√°i c·ªßa m·ªôt ƒë∆°n h√†ng ƒëang thanh to√°n.
    """
    order = crud.get_order_by_id(session, order_id)
    if not order:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.")

    return schemas.CheckoutStatusResponse(
        order_id=order.id,
        status=order.status
    )

@router.post("/webhook/payos")
async def handle_payment_webhook(request: Request, session: SessionDep):
    """
    X·ª≠ l√Ω webhook ƒë∆∞·ª£c g·ª≠i ƒë·∫øn t·ª´ PayOS.
    """
    try:
        payload = await request.json()
    except json.JSONDecodeError:
        raise HTTPException(status_code=400, detail="Payload JSON kh√¥ng h·ª£p l·ªá")

    # --- B·∫£o m·∫≠t: X√°c th·ª±c ch·ªØ k√Ω Webhook t·ª´ Body theo t√†i li·ªáu PayOS ---
    signature_from_payload = payload.get("signature")
    data_object = payload.get("data")

    if not signature_from_payload or not isinstance(data_object, dict):
        raise HTTPException(status_code=400, detail="Webhook kh√¥ng h·ª£p l·ªá, thi·∫øu signature ho·∫∑c data.")

    # S·ª≠ d·ª•ng c√°c h√†m helper t·ª´ t√†i li·ªáu PayOS ƒë·ªÉ t·∫°o chu·ªói hash
    sorted_data_by_key = sort_obj_data_by_key(data_object)
    string_to_hash = convert_obj_to_query_str(sorted_data_by_key)

    expected_signature = hmac.new(
        key=settings.PAYOS_CHECKSUM_KEY.encode('utf-8'),
        msg=string_to_hash.encode('utf-8'),
        digestmod=hashlib.sha256
    ).hexdigest()

    if not hmac.compare_digest(expected_signature, signature_from_payload):
        print("--- ", "SIGNATURE DEBUG", " ---")
        print(f"STRING TO HASH: \"{string_to_hash}\"")
        print(f"EXPECTED SIG:   \"{expected_signature}\"")
        print(f"RECEIVED SIG:   \"{signature_from_payload}\"")
        raise HTTPException(status_code=403, detail="Ch·ªØ k√Ω webhook kh√¥ng h·ª£p l·ªá.")
    
    print("Signature is valid.")
    # --- K·∫øt th√∫c ph·∫ßn b·∫£o m·∫≠t ---
    
    # --- N·∫øu l√† g√≥i test k·∫øt n·ªëi ---
    if (
        payload.get("code") == "00"
        and payload.get("desc") == "success"
        and data_object.get("orderCode") == 123
        and data_object.get("amount") == 3000
        and data_object.get("description") == "VQRIO123"
        and data_object.get("accountNumber") == "12345678"
    ):
        print("üì© Nh·∫≠n g√≥i test k·∫øt n·ªëi t·ª´ PayOS.")
        return {"status": "ok"}

    if payload.get("code") != "00":
        return {"status": "ignored", "reason": "Giao d·ªãch ch∆∞a th√†nh c√¥ng."}

    order_code_from_webhook = data_object.get("orderCode")
    if not order_code_from_webhook:
        raise HTTPException(status_code=400, detail="Webhook kh√¥ng ch·ª©a orderCode.")

    order_id = crud.get_order_id_by_order_code(session, order_code=order_code_from_webhook)
    if not order_id:
        raise HTTPException(status_code=404, detail=f"Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi m√£ {order_code_from_webhook}")

    transaction_id = data_object.get("paymentLinkId")

    finalized_order = crud.finalize_order_and_session(
        session=session,
        order_id=order_id,
        gateway_txn_id=transaction_id
    )

    if not finalized_order:
        return {"status": "ignored", "reason": "ƒê∆°n h√†ng kh√¥ng t√¨m th·∫•y ho·∫∑c ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω."}

    # Create notification for the user
    if finalized_order.session and finalized_order.session.user_id:
        notification_title = "Thanh to√°n th√†nh c√¥ng!"
        notification_message = f"ƒê∆°n h√†ng c·ªßa b·∫°n #{finalized_order.id} ƒë√£ ƒë∆∞·ª£c thanh to√°n th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm!"
        crud.create_notification(
            session=session,
            user_id=finalized_order.session.user_id,
            title=notification_title,
            message=notification_message
        )

    print(f"Successfully finalized order {order_id}")
    return {"status": "success"}